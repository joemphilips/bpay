// Type definitions for bclient 0.1.3
// Project: https://github.com/bcoin-org/bcoin
// Definitions by: Joe Miyamoto <joemphilips@gmail.com>
/** Declaration file generated by dts-gen */
declare module 'bclient' {
  import { Client, BCurlClientOptions } from 'bcurl';
  import { BloomFilter } from 'bfilter';
  export class NodeClient extends Client {
    constructor(options: string | BCurlClientOptions);

    auth(): Promise<void>;

    execute(endpoint: string, method: string, params?: object): Promise<any>;
    execute(method: string, params?: object): Promise<any>;

    getMempool(): Promise<any>;
    getInfo(): Promise<any>;
    getCoinsByAddress(address: string): Promise<any>;
    getCoinsByAddresses(addresses: string[]): Promise<any>;
    getCoin(hash: string, index: number): Promise<any>;
    getTXByAddress(address: string): Promise<any>;
    getTXByAddresses(addresses: string[]): Promise<any>;
    getTX(hash: string): Promise<any>;
    getBlock(block: string | number): Promise<any>;
    broadcast(rawtx: string): Promise<any>;
    reset(height: number): Promise<any>;
    private watchChain(): Promise<any>;
    private watchMempool(): Promise<any>;
    getTip(): Promise<any>;
    getEntry(block: string): Promise<any>;
    getHashes(start?: number, end?: number): Promise<any>;
    send(tx: string): Promise<any>;
    setFilter(filter: BloomFilter): Promise<any>;
    addFilter(chunks: Buffer): Promise<any>;
    resetFilter(): Promise<any>;
    estimateFee(block?: number): Promise<any>;
    rescan(start: number | string): Promise<any>;
  }

  export interface Account {
    name: string;
    initialized: boolean;
    witness: boolean;
    watchOnly: boolean;
    type: 'pubkeyhash' | 'multisig';
    m: number;
    n: number;
    accountIndex: number;
    receiveDepth: number;
    changeDepth: number;
    nestedDepth: number;
    lookahead: number;
    receiveAddress: string;
    changeAddress: string;
    nestedAddress: null;
    accountKey: string;
    keys: ReadonlyArray<any>;
    balance: {
      tx: number;
      coin: number;
      unconfirmed: number;
      confirmed: number;
    };
  }

  export class WalletClient extends Client {
    wallets: Map<any, any>;
    constructor(options: string | BCurlClientOptions);
    open(): Promise<void>;
    close(): Promise<void>;
    auth(): Promise<void>;
    execute(endpoint: string, method: string, params?: object): Promise<any>;
    execute(method: string, params?: object): Promise<any>;
    private init(): void;
    /**
     * Open the client. Listen to following events
     * - tx
     * - confirmed
     * - unconfirmed
     * - conflict
     * - updated
     * - address
     * - balance
     */
    open(): Promise<void>;
    close(): Promise<void>;
    wallet(id: number, token: string): Wallet;
    none(): Promise<void>;
    /**
     * Same with `join`
     * @param id
     * @param token
     */
    add(id: number, token: string): Promise<void>;
    /**
     * Join a wallet.
     * @param token
     */
    join(id: number, token: string): Promise<void>;
    leave(id: string): Promise<void>;
    rescan(height?: number): Promise<any>;
    resend(): Promise<any>;
    backup(path: string): Promise<any>;
    getWallets(): Promise<any>;
    createWallet(id: string, options?: any): Promise<any>;
    getHistory(id: string, account: string): Promise<any>;
    getCoins(id: string, account: string): Promise<any>;
    getPending(id: string, account: string): Promise<any>;
    getBalance(id: string, account: string): Promise<any>;
    getLast(id: string, account: string, limit: number): Promise<any>;
    getRange(id: string, account: string, options: object): Promise<any>;
    getTX(id: string, hash: string): Promise<any>;
    getBlocks(id: string): Promise<any>;
    getBlock(id: string): Promise<any>;
    getCoin(id: string, hash: string, index: number): Promise<any>;
    zap(id: string, account: string, age: number): Promise<any>;
    createTX(id: string, options: any): Promise<any>;
    send(id: string, options: { address: string; value: number }): Promise<any>;
    sign(id: string, options: object): Promise<any>;
    getInfo(id: string): Promise<any>;
    getAccounts(id: string): Promise<any>;
    getMaster(id: string): Promise<any>;
    getAccount(id: string, account: string): Promise<any>;
    createAccount(id: string, name: string, options: any): Promise<any>;
    createAddress(id: string, account: string): Promise<any>;
    createChange(id: string, account: string): Promise<any>;
    createNested(id: string, account: string): Promise<any>;
    setPassphrase(id: string, passphrase: string, old?: string): Promise<any>;
    retoken(id: string, passphrase: string): Promise<string>;
    importPrivate(
      id: number | string,
      account: string,
      privateKey: string,
      passphrase?: string
    ): Promise<any>;
    importPublic(
      id: number | string,
      account: string,
      publicKey: string
    ): Promise<any>;
    importAddress(
      id: number | string,
      account: string,
      address: string
    ): Promise<any>;
    lockCoin(id: string, hash: string, index: number): Promise<any>;
    unlockCoin(id: string, hash: string, index: number): Promise<any>;
  }

  /**
   * Wallet instance.
   * This is different from a `Wallet` class in the bcoin.
   * Since the actual object is on the server side.
   */
  class Wallet {}
}
