/** Declaration file generated by dts-gen */
declare module 'bclient' {
  export class NodeClient {
    constructor(...args: any[]);

    addFilter(...args: any[]): void;

    auth(...args: any[]): void;

    broadcast(...args: any[]): void;

    estimateFee(...args: any[]): void;

    execute(...args: any[]): void;

    getBlock(...args: any[]): void;

    getCoin(...args: any[]): void;

    getCoinsByAddress(...args: any[]): void;

    getCoinsByAddresses(...args: any[]): void;

    getEntry(...args: any[]): void;

    getHashes(...args: any[]): void;

    getInfo(...args: any[]): void;

    getMempool(...args: any[]): void;

    getTX(...args: any[]): void;

    getTXByAddress(...args: any[]): void;

    getTXByAddresses(...args: any[]): void;

    getTip(...args: any[]): void;

    rescan(...args: any[]): void;

    reset(...args: any[]): void;

    resetFilter(...args: any[]): void;

    send(...args: any[]): void;

    setFilter(...args: any[]): void;

    watchChain(...args: any[]): void;

    watchMempool(...args: any[]): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;
  }

  export interface BclientOption {
    readonly apiKey?: string;
    readonly ssl?: boolean;
    readonly host?: string;
    readonly port?: number;
    readonly path?: string;
    readonly username?: string;
    readonly password?: string;
    readonly id?: string;
    readonly token?: string;
  }

  export interface Account {
    name: string;
    initialized: boolean;
    witness: boolean;
    watchOnly: boolean;
    type: 'pubkeyhash' | 'multisig';
    m: number;
    n: number;
    accountIndex: number;
    receiveDepth: number;
    changeDepth: number;
    nestedDepth: number;
    lookahead: number;
    receiveAddress: string;
    changeAddress: string;
    nestedAddress: null;
    accountKey: string;
    keys: ReadonlyArray<any>;
    balance: {
      tx: number;
      coin: number;
      unconfirmed: number;
      confirmed: number;
    };
  }

  export class WalletClient {
    constructor(options?: BclientOption);

    addSharedKey(...args: any[]): void;

    all(...args: any[]): void;

    auth(...args: any[]): void;

    backup(...args: any[]): void;

    close(...args: any[]): void;

    createAccount(...args: any[]): void;

    createAddress(...args: any[]): void;

    createChange(...args: any[]): void;

    createNested(...args: any[]): void;

    createTX(...args: any[]): void;

    createWallet(...args: any[]): void;

    dispatch(...args: any[]): void;

    execute(...args: any[]): void;

    getAccount(...args: any[]): void;

    getAccounts(...args: any[]): void;

    getBalance(...args: any[]): void;

    getBlock(...args: any[]): void;

    getBlocks(...args: any[]): void;

    getCoin(...args: any[]): void;

    getCoins(...args: any[]): void;

    getHistory(...args: any[]): void;

    getInfo(...args: any[]): void;

    getKey(...args: any[]): void;

    getLast(...args: any[]): void;

    getLocked(...args: any[]): void;

    getMaster(...args: any[]): void;

    getPending(...args: any[]): void;

    getRange(...args: any[]): void;

    getTX(...args: any[]): void;

    getWIF(...args: any[]): void;

    getWallets(...args: any[]): void;

    importAddress(...args: any[]): void;

    importPrivate(...args: any[]): void;

    importPublic(...args: any[]): void;

    init(...args: any[]): void;

    join(...args: any[]): void;

    leave(...args: any[]): void;

    lock(...args: any[]): void;

    lockCoin(...args: any[]): void;

    none(...args: any[]): void;

    open(...args: any[]): void;

    removeSharedKey(...args: any[]): void;

    rescan(...args: any[]): void;

    resend(...args: any[]): void;

    resendWallet(...args: any[]): void;

    retoken(...args: any[]): void;

    send(...args: any[]): void;

    setPassphrase(...args: any[]): void;

    sign(...args: any[]): void;

    unlock(...args: any[]): void;

    unlockCoin(...args: any[]): void;

    wallet(...args: any[]): void;

    zap(...args: any[]): void;

    static defaultMaxListeners: number;

    static init(): void;

    static listenerCount(emitter: any, type: any): any;

    static usingDomains: boolean;
  }
}
