// Type definitions for bsock 0.1.2
// Project: https://github.com/bcoin-org/bsock
// Definitions by: Joe Miyamoto <joemphilips@gmail.com>

/** Declaration file generated by dts-gen */

declare module 'bsock' {
  import { Server as HTTPServer } from 'http';
  export type BsockEvent = 'close' | 'socket' | 'upgrade';
  type Channels = Map<string, string>;
  type Protocol = any;
  export interface ServerOptions {
    protocols: Protocol[];
    socket: Set<Socket>;
    channels: Channels;
    mounts: any[];
    mounted: boolean;
  }

  /**
   * This will be attached to bweb.Server.io
   */
  export class Server {
    public protocols?: Protocol[];
    public sockets: Set<Socket>;
    public channels: Channels;
    public mounts: any[];
    public mounted: boolean;
    constructor(options?: Partial<ServerOptions>);

    handleSocket(socket: Socket): void;

    mount(server: Server): void;

    open(): Promise<void>;

    close(): Promise<void>;

    /**
     * attach this socket server to http webserver
     * used in bweb.Server
     * @param server
     */
    attach(server: HTTPServer): Server;

    add(socket: Socket): void;

    remove(socket: Socket): void;

    join(socket: Socket, name: string): boolean;

    leave(socket: Socket, name: string): boolean;

    /**
     * get a socket by it's channel's name
     * @param name
     */
    channel(name: string): boolean;

    to(name: string, ...args: any[]): void;

    all(...args: any[]): void;

    static attach(parent: HTTPServer, options?: Partial<ServerOptions>);

    static createServer(options: Partial<ServerOptions>): Server;

    static defaultMaxListeners: number;

    static usingDomains: boolean;
  }

  export class Socket {
    public server: null | Server;
    public ws: null | WebSocket;
    public protocol: string;
    constructor();

    accept(...args: any[]): void;

    bind(...args: any[]): void;

    call(...args: any[]): void;

    channel(...args: any[]): void;

    close(...args: any[]): void;

    connect(...args: any[]): void;

    destroy(...args: any[]): void;

    emitAsync(...args: any[]): void;

    error(...args: any[]): void;

    fire(...args: any[]): void;

    handleAck(...args: any[]): void;

    handleCall(...args: any[]): void;

    handleClose(...args: any[]): void;

    handleConnect(...args: any[]): void;

    handleDisconnect(...args: any[]): void;

    handleError(...args: any[]): void;

    handleEvent(...args: any[]): void;

    handleFrame(...args: any[]): void;

    handleMessage(...args: any[]): void;

    handleNoop(...args: any[]): void;

    handleOpen(...args: any[]): void;

    handlePacket(...args: any[]): void;

    handlePing(...args: any[]): void;

    handlePong(...args: any[]): void;

    handleUpgrade(...args: any[]): void;

    hook(...args: any[]): void;

    init(...args: any[]): void;

    join(...args: any[]): void;

    leave(...args: any[]): void;

    observe(...args: any[]): void;

    onClose(...args: any[]): void;

    onError(...args: any[]): void;

    onMessage(...args: any[]): void;

    onOpen(...args: any[]): void;

    reconnect(...args: any[]): void;

    send(...args: any[]): void;

    sendAck(...args: any[]): void;

    sendBinary(...args: any[]): void;

    sendCall(...args: any[]): void;

    sendClose(...args: any[]): void;

    sendConnect(...args: any[]): void;

    sendDisconnect(...args: any[]): void;

    sendError(...args: any[]): void;

    sendEvent(...args: any[]): void;

    sendFrame(...args: any[]): void;

    sendHandshake(...args: any[]): void;

    sendMessage(...args: any[]): void;

    sendOpen(...args: any[]): void;

    sendPacket(...args: any[]): void;

    sendPing(...args: any[]): void;

    sendPong(...args: any[]): void;

    stall(...args: any[]): void;

    start(...args: any[]): void;

    stop(...args: any[]): void;

    unbind(...args: any[]): void;

    unhook(...args: any[]): void;

    static accept(...args: any[]): void;

    static connect(...args: any[]): void;

    static defaultMaxListeners: number;

    static usingDomains: boolean;

    // -- property inherited from EventEmitter
    addListener(type: any, listener: any): any;

    emit(type: any, ...args: any[]): any;

    eventNames(): any;

    getMaxListeners(): any;

    listenerCount(type: any): any;

    listeners(type: any): any;

    on(type: any, listener: any): any;

    once(type: any, listener: any): any;

    prependListener(type: any, listener: any): any;

    prependOnceListener(type: any, listener: any): any;

    removeAllListeners(type: any, ...args: any[]): any;

    removeListener(type: any, listener: any): any;

    setMaxListeners(n: any): any;
  }

  export function WebSocket(
    request: any,
    socket: any,
    body: any,
    protocols: any,
    options: any
  ): any;

  export interface WebSocket {}

  export function attach(p0: any, p1: any): any;

  export function connect(p0: any, p1: any, p2: any, p3: any): any;

  export function createServer(p0: any): any;

  export function server(): void;

  export function socket(): void;
}
